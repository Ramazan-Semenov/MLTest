ID	Area	Title	Description
29338	0	Include fragment and query in Uri.LocalPath on Unix	While testing XmlUriResolver, @pjanotti discovered that any segments of a file path following a '#' symbol will be cut out of Uri.LocalPath on Unix. Based on additional tests, this also occurs for the '?' symbol. This is happening because the Unix specific case for local path only uses the path component of the URI:  https://github.com/dotnet/corefx/blob/9e8d443ff78c4f0a9a6bedf7f95961cf96ceff0a/src/System.Private.Uri/src/System/Uri.cs#L1032-L1037    The fix here is to include the fragment and query in LocalPath in the Unix path specific case. This PR enables the test case in XmlUriResolver that uncovered this issues, and adds some additional cases to our URI tests.    Fixes: #28486 
29337	1	Unify setting null CookieContainer behavior on HttpClientHandler	For HttpClientHandler layer (above the WinHttpHandler layer on Windows), we should be consistent and throw the exception in the CookieContainer setter when null value is provided, to match .NET Framework's behavior.  This would keep the same behavior across all platforms for the setter of the HttpClientHandler.CookieContainer property.    Close: #3205
29334	2	Check URI scheme length only after verifying the scheme contains valid characters	"URI construction is failing on valid URIs under the following conditions:  - An absolute URI is constructed using the `Uri(Uri absolute, string relative)` constructor.  - The relative string begins with 1024+ characters, followed by a colon.  - The relative string contains but does not begin with a forward or back slash.    See the test added in this PR for an example URI.    The fix is to check the scheme length _after_ validating that the potential scheme contains only legal characters (ie, not a forward or back slash). This keeps us from running into the situation above, where the relative URI contains a colon that is unambiguously not a scheme separator because the ""scheme"" is actually just a path that contains a colon.    This fix improves the correctness of our relative path parsing at the cost of an additional stacalloc in the case where the relative part of the URI is really an absolute URI with a scheme length >= 1024.    Fixes: #29011     Details below:  ---------  When we construct an absolute URI from a relative URI, the first thing we try to do is parse the relative URI as an absolute URI. That parsing process returns an error code that we use to determine what happens next. The parsing errors are as follows:  https://github.com/dotnet/corefx/blob/bffef76f6af208e2042a2f27bc081ee908bb390b/src/System.Private.Uri/src/System/UriEnumTypes.cs#L67-L93    If we successfully parse an absolute URI (error = None), we return that URI and ignore the absolute URI we were passed.   That might seem a little odd, but it's a useful behavior in practice.    If we get an error that is less than `LastRelativeUriOkErrIndex`(see the code above), we attempt to create a relative URI from the string and then root it with the absolute URI provided.    If we return any other error, we believe that the string is neither a valid relative or absolute URI and throw an exception. In this case, PrivateParseMinimal is returning the error `SchemeLimit`, which indicates that we have too large of a scheme. As documented in the code above, this isn't considered a recoverable error.    The relative string provided has some characters that are clearly invalid in a scheme, so the real error we should be returning from TryParse is `InvalidScheme`. Since `InvalidScheme` is less than `LastRelativeUriOkErrIndex`, we will then be able to create a relative URI. Fixing the returned parsing error allows this URI to be constructed successfully."
29331	0	"[Perf] Ubuntu16.04 runs blocked by multiple ""PE file is already strong-name signed."" errors"	[perf_ubuntu16.04_release](https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_ubuntu16.04_release/1715/consoleText)    ```bash  bash ./build-managed.sh -release -tests -- /p:Performance=true /p:TargetOS=Linux /m:1 /p:LogToBenchview=true /p:BenchviewRunType=rolling /p:PerformanceType=Profile  ```  ...    /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/Tools/sign.targets(113,5): error : /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/bin/obj/ref/System.Threading.Tasks.Dataflow/4.6.3.0/netstandard/System.Threading.Tasks.Dataflow.dll: PE file is already strong-name signed. [/home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/src/System.Threading.Tasks.Dataflow/ref/System.Threading.Tasks.Dataflow.csproj]      0 Warning(s)      32 Error(s)
29329	2	Port System.ComponentModel.Composition.Registration (MEF1) to .NET Core	Greetings,    regarding [Port System.ComponentModel.Composition (MEF1) to .NET Core](https://github.com/dotnet/corefx/issues/11857) the following is still missing:    - `System.ComponentModel.Composition.Registration.RegistrationBuilder`  - `System.ComponentModel.Composition.Registration.PartBuilder`  - `System.ComponentModel.Composition.Registration.PartBuilder<>`    See also https://github.com/dotnet/corefx/issues/11857#issuecomment-382342975    edit by @ViktorHofer: fixed link.
29328	0	Port LTTng fix for rootfs from CoreCLR	Port https://github.com/dotnet/coreclr/pull/17762 to CoreFx.
29325	1	The type initializer for 'TimeZoneConverter.TZConvert' threw an exception.	"I got this error on aws lambda.  The type initializer for 'TimeZoneConverter.TZConvert' threw an exception.  ""errorMessage"": ""An item with the same key has already been added. Key: Canada/East-Saskatchewan"","
29324	0	Remove manual typeforwards to S.P.CoreLib for now exposed types.	Relates to https://github.com/dotnet/coreclr/pull/17185    @safern I would like to get rid off the ValueTuple typeforwards and with that get rid of the whole manual shim for mscorlib. That requires that we compile against a newer netfx version where ValueTuples are inbox.     cc @jkotas
